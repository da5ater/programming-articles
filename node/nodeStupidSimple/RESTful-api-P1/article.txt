RESTful services 

- lets cut the crap and get to the point
- RESTful services are a way to expose your data and functionality over HTTP requests 
- we have a dynamic that is important to undetand 
- we have a client and a server

!!!pic
- the client is the one that makes the request

!!!pic
- the server is the one that responds to the request
- and on the server we expose a bunch of services that the client can call

but how do the client talks with the server? 
- client talks with server using HTTP requests 
- the server responds to the client using HTTP responses

ok so in our article the client is actually us in a web browser by typing a URL like this :
http://localhost:3000/


and the server is actually our application that is running on port 3000
- in this section of the last article we created a dump server using the http module https://medium.com/@mohamedsocial555/node-modules-stupid-simple-7fd143cc93a2#:~:text=own%20event%20emitter-,http%20module,-is%20used%20for
- we will be recreating it using express framework 


but here are key information about REST services :

- REST is short for Representational State Transfer
- it's basically a set of rules for how to build this http services in the server
- it provides a way to do CRUD operations on resources 

- CRUD stands for Create, Read, Update, and Delete

and standard HTTP methods are :
- GET: used to retrieve data from the server
- POST: used to send data to the server
- PUT: used to update data on the server
- DELETE: used to delete data from the server



our main goal is to create a server that can respond to HTTP requests using express framework
- express is a web framework for node.js that makes it easy to create web applications and APIs
- it is built on top of the http module and provides a lot of features that make it easier to work with HTTP requests and responses


one last thing is 
lets explain this URL Â **http://vidly.com/api/customers**
- this is called the endpoint
- a client will make a request to this endpoint to talk to the server
- the address can start with http or https that depends on the server requirements
- vidly.com is the domain name of the server
- /api/customers is the resource


Main Takeaways:
- RESTful services let clients and servers talk using HTTP.
- REST uses standard HTTP methods: GET, POST, PUT, DELETE.
- Express makes building REST APIs in Node.js simple.
- Endpoints are URLs where clients access server resources.

ok enough talking lets get to the meat of the article

---
BUILDING OUR FIRST RESTFUL SERVICE

ok here is our small sever using the http module

!!!code
const http = require('http');
const server = http.createServer((req, res) => {
  res.write("Hello World");
  res.end();
});
server.listen(3000, () => {
  console.log('Server running at http://localhost:3000/');
});


- this is a simple server that responds with "Hello World" to any request
but how can we do the same thing using express framework

lets load express module
!!!code
const express = require('express');
const app = express(); // create an instance of express
const port = 3000; // define the port number


- lets create a route that responds to any request 
!!!code
app.get('/', (req, res) => {
  res.send('Hello World');
});

and lets start the server
!!!code
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});

and here is the full server code
!!!code
const express = require('express');
const app = express(); // create an instance of express
const port = 3000; // define the port number
app.get('/', (req, res) => {
  res.send('Hello World');
});
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});


> we will explain what are routes later just stay with me 

- now if you run this code and open your browser and type http://localhost:3000/ you will see "Hello World" in the browser

GREAT SUCCESS hehe *__*

Key Takeaways:
- we now can build a small server using express framework (which is GREAT)

---
ROUTE parameters

what is a route ?
- a route is a path that the client can use to access a resource on the server
- practically it - It is a combination of an HTTP method (GET, POST, PUT, DELETE) and a URL path.

here is a set of examples of routes and it's explaination 

- http://localhost:3000/api/customers -> this route will return all customers
- http://localhost:3000/api/customers/1 -> this route will return the customer with id 1
- http://localhost:3000/api/customers/1/orders -> this route will return all orders for the customer with id 1
- http://localhost:3000/api/posts/2001/3 -> this route will return all post with the specified date

of course it dosen't have to return every single time
we can do all the 4 CRUD operation by using different HTTP methods [will be emphasized  later]


so what is a route parameter ?
A route parameter is a variable part of the URL path that can change based on the request.
- It is defined by a colon (`:`) followed by the parameter name in the URL path.
- For example, in the URL `/api/customers/:id`, `:id` is a route parameter that represents the ID of the customer.
- When a client makes a request to this URL, the server can extract the value of the `id` parameter and use it to identify the specific customer being requested.
- Route parameters are useful for creating dynamic routes that can handle different values without needing to define separate routes for each possible value.


so this is a route that responds to a GET request to the root URL (`/`) and sends back a response with the text "Hello World!".

> note that the following code is part of the small server we created in the last section

!!!code
app.get('/', (req, res) => {
  res.send('Hello World!');
});


> but what if we want to create a route that responds to whatever the user types in the URL? 


- we want to get dynamic information from the URL or endpoint 
- and based on it we want to do something 
- anything?? yes anything.

- so for a URL with a query parameter name `shaboom` we want to respond with `boooom`

!!!code 
app.get('/api/:query', (req, res) => {
	if(req.params.query === 'shaboom') {
		res.send('boooom');
	} else {
		res.send('no boom');
	}
});

- so if you type http://localhost:3000/api/shaboom you will get `boooom` in the browser


takeaway here is that :
- in the route handler function , we can set the route to be anything
- an then inside the function we can use that information 

no bueno ? lets have more examples


let's get a specefic course by id = 1 
!!!code
const express = require('express');
const app = express();
const port = 3000;
const courses = [
  { id: 1, name: 'course1' },
  { id: 2, name: 'course2' },
  { id: 3, name: 'course3' }
];

app.get(`api/courses/1`, (req, res) => {
		res.send(courses[0]);
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});

- so if you type http://localhost:3000/api/courses/1 you will get the first course in the array

- but what if we want to get the course by id dynamically ?
- meanning the client would add anynumber in the URL and we will get it

!!!code
app.get('/api/courses/:id', (req, res) => {
  console.log(req.params.id); // this will log the id parameter from the URL
});

- now `:id` is a route parameter that represents the ID of the course
- when a client makes a request to this URL, the server can extract the value of the `id` parameter from `req.params.id` and use it to identify the specific course being requested.


- so if you type http://localhost:3000/api/courses/1 you will log `1` in the console
- and if you type http://localhost:3000/api/courses/2 you will log `2` in the console


mmultiple parameters 

- let's say we  have a blog and we want to get a post by id and the date

- so the URL will look like this http://localhost:3000/api/posts/2001/3
- notice here we want to get 2 parameters  :year and :month
!!!code
app.get('/api/posts/:year/:month', (req, res) => {
  const year = req.params.year;
  const month = req.params.month;
  res.send(`Year: ${year}, Month: ${month}`);
});

- so if you type http://localhost:3000/api/posts/2001/3 you will get `Year: 2001, Month: 3` in the browser
- and if you type http://localhost:3000/api/posts/2002/4 you will get `Year: 2002, Month: 4` in the browser

key takeaways here are :
- route parameters can be set by adding a colon `:` before the parameter name in the URL path
- route parameters can be used to create dynamic routes that can handle different values without needing to define separate routes for each possible value
- route parameters can be accessed using `req.params` object in the route handler function


query string parameters

- sometimes we need to pass additional information to the server
- for example we may want to filter the results based on a specific criteria [name or age]]
- so we can use query string parameters to pass this information 

- query string parameters are added to the URL after a question mark `?`

here is a query string parameter add it to the last example  

http://localhost:3000/api/posts/2023/10/1?name=ahmed&age=20

- so in English this URL means :  give me the post with id 1 and date 2023/10/1 and the name is Ahmed and the age is 20
- so our route would look like this 

app.get('/api/posts/:year/:month/:day', (req, res) => {
		res.send(req.query); // this will log the query string parameters from the URL
});


- and the output would be 
json
{
	"name": "ahmed",
	"age": "20"
}

- so if you type http://localhost:3000/api/posts/2023/10/1?name=ahmed&age=20 you will get the query string parameters in the console

key takeaways here are :
- route parameters are used to extract dynamic values from the URL path
- route parameters are defined by a colon `:` followed by the parameter name in the URL path
- query string parameters can be used to pass additional information to the server
- query string parameters are added to the URL after a question mark `?`
- query string parameters can be accessed using `req.query` object in the route handler function


---
handling HTTP methods

ok now that we can build a small server and we can handle route parameters and query string parameters
- lets see how we can handle different HTTP methods

- ermember the 4 CRUD operations we talked about earlier
- Create: POST
- Read: GET
- Update: PUT
- Delete: DELETE

lets start with get 
- so we can use the GET method to retrieve data from the server
- in our case we can use the GET method to retrieve a list of all cources from the server

!!!code
const express = require("express");
const app = express();
const PORT = 3000;
const courses = [
		{ id: 1, name: "course 1" },
		{ id: 2, name: "course 2" },
		{ id: 3, name: "course 3" },
];
app.get("api/cources/:id", (req, res) => {
  return a course with the id
	res.send(courses[id]);
});

app.listen(PORT, () => {
	console.log(`server is running on port ${PORT}`);
});

- so if you type http://localhost:3000/api/cources/1 you will get the first course in the array
- do not use id that is not in the courses array for now , we will discuss how to validate later 

- the response will be 
```json
{
	"id": 1,
	"name": "course 1"
}
```

POST method 
